import { Controller } from \"@hotwired/stimulus\"\nimport mapboxgl from \"mapbox-gl\"\n\n// Connects to data-controller=\"vrp\"\nexport default class extends Controller {\n  static values = {\n    accessToken: String,\n  }\n\n  static targets = [\"locationsInput\"]\n\n  connect() {\n    mapboxgl.accessToken = this.accessTokenValue\n\n    this.map = new mapboxgl.Map({\n      container: this.element,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [-74.5, 40], // starting position [lng, lat]\n      zoom: 9, // starting zoom\n    })\n  }\n\n  async solve(event) {\n    event.preventDefault()\n\n    const locations = this.locationsInputTarget.value.split(/\n/).map(line => {\n      const [lat, lng] = line.split(\",\").map(coord => parseFloat(coord.trim()))\n      return [lng, lat] // Mapbox expects [lng, lat]\n    }).filter(coord => !isNaN(coord[0]) && !isNaN(coord[1]))\n\n    if (locations.length === 0) {\n      alert(\"Please enter at least one location.\")\n      return\n    }\n\n    try {\n      const response = await fetch(\"/vrp/solve\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRF-Token\": document.querySelector(\'meta[name=\"csrf-token\"]\').content\n        },\n        body: JSON.stringify({ vrp: { locations: locations } })\n      })\n\n      const data = await response.json()\n\n      if (data.status === \"success\") {\n        console.log(\"VRP Solution:\", data.routes)\n        this.renderRoutes(data.routes)\n      } else {\n        alert(\"Error solving VRP: \" + data.message)\n      }\n    } catch (error) {\n      console.error(\"Error:\", error)\n      alert(\"An error occurred while communicating with the solver.\")\n    }\n  }\n\n  renderRoutes(locations) {\n    // Remove existing layers and sources if any\n    if (this.map.getSource(\'route\')) {\n      this.map.removeLayer(\'route\');\n      this.map.removeSource(\'route\');\n    }\n\n    this.map.addSource(\'route\', {\n      type: \'geojson\',\n      data: {\n        type: \'Feature\',\n        properties: {},\n        geometry: {\n          type: \'LineString\',\n          coordinates: locations\n        }\n      }\n    });\n\n    this.map.addLayer({\n      id: \'route\',\n      type: \'line\',\n      source: \'route\',\n      layout: {\n        \'line-join\': \'round\',\n        \'line-cap\': \'round\'\n      },\n      paint: {\n        \'line-color\': \'#888\',\n        \'line-width\': 8\n      }\n    });\n\n    // Fit map to the route\n    const bounds = new mapboxgl.LngLatBounds();\n    for (const coord of locations) {\n      bounds.extend(coord);\n    }\n    this.map.fitBounds(bounds, { padding: 20 });\n  }\n}\n
