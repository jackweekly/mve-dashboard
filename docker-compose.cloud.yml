services:
  web:
    build: .
    env_file:
      - .env.cloud
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: "true"
      RAILS_SERVE_STATIC_FILES: "true"
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "80:3000"
    command: bundle exec puma -C config/puma.rb -b tcp://0.0.0.0:3000

  worker:
    build: .
    env_file:
      - .env.cloud
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: bundle exec sidekiq -C config/sidekiq.yml

  migrate:
    build: .
    env_file:
      - .env.cloud
    environment:
      RAILS_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    entrypoint: ["/rails/bin/docker-entrypoint"]
    command: bundle exec rails db:migrate

  redis:
    image: redis:7.4-alpine
    restart: unless-stopped
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sparrow_ops_production}
      POSTGRES_USER: ${POSTGRES_USER:-sparrow_ops}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-me}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
